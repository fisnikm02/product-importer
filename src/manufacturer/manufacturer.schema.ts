import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';
import { nanoid } from 'nanoid';

export type ManufacturerDocument = Manufacturer & Document;

@Schema()
export class Manufacturer {
    @Prop({ required: true, unique: true })
    manufacturerId: string;  // Manufacturer ID from the external source, unique

    @Prop({ default: () => nanoidPromise() })
    docId: string;  // Internal unique document ID generated by nanoid

    @Prop({ required: true })
    name: string;  // Manufacturer's name

    @Prop()
    contactInfo: string;  // Manufacturer's contact information (optional)

    @Prop()
    address: string;  // Manufacturer's address (optional)

    @Prop({ default: Date.now })
    createdAt: Date;  // Automatically set creation date

    @Prop({ default: Date.now })
    updatedAt: Date;  // Automatically set update date
}

export const ManufacturerSchema = SchemaFactory.createForClass(Manufacturer);

ManufacturerSchema.pre('save', function (next) {
    this.updatedAt = new Date();
    next();
});

async function nanoidPromise(): Promise<string> {
    const { nanoid } = await import('nanoid');
    return nanoid();
}